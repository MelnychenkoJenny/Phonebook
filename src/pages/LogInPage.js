import {
  Button,
  FormStyle,
  InputGroup,
  InputLabel,
  Input,
  ErrorMessageStyle,
} from 'components/ContactForm/ContacrForm.styled';
import { nanoid } from 'nanoid';
import { CiLogin } from 'react-icons/ci';
import { BsEyeSlash, BsEye } from 'react-icons/bs';

import * as yup from 'yup';
import { yupResolver } from '@hookform/resolvers/yup';
import { useForm } from 'react-hook-form';
import { useDispatch } from 'react-redux';
import { logIn } from 'redux/Auth/operationsAuth';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { BtnVisiblePassword, ContainerLogInPage } from './LogInPage.styled';
import { Title } from 'components/App/App.styled';
import { useState } from 'react';

const schema = yup.object().shape({
  email: yup
    .string()
    .email('–ü–æ—à—Ç–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ—é, –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ @ —Ç–∞ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è')
    .required("–ü–æ—à—Ç–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞!"),
  password: yup
    .string()
    .required("–ü–∞—Ä–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π!")
    .min(5, '–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 5 —Ü–∏—Ñ—Ä')
    .max(12, '–ü–∞—Ä–æ–ª—å –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 12 —Ü–∏—Ñ—Ä'),
});

const passwordId = nanoid();
const emailId = nanoid();

export default function LoginPage() {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(schema),
  });
  const [passwordVisible, setPasswordVisible] = useState(false);
  const dispatch = useDispatch();

  const onSubmit = ({ email, password }) => {
    const dataLogIn = { email, password };

    dispatch(logIn(dataLogIn))
      .unwrap()
      .then(({ user: { name } }) => {
        reset();
        return toast.success(
          `–í—ñ—Ç–∞—î–º–æ, ${name} —É —Ç–≤–æ—ó–π –æ—Å–æ–±–∏—Å—Ç—ñ–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ñ–π –∫–Ω–∏–∑—ñ.`
        );
      })
      .catch(() =>
        toast.error('–£–ø—Å. –ü–æ—à—Ç–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å –Ω–µ –≤—ñ—Ä–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. üôÑ')
      );
  };
  const togglePasswordVisible = () => setPasswordVisible(!passwordVisible);

  return (
    <ContainerLogInPage>
      <FormStyle onSubmit={handleSubmit(onSubmit)}>
        <Title>–í—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</Title>
        <InputGroup>
          <InputLabel htmlFor={emailId}>–ü–æ—à—Ç–∞</InputLabel>
          <Input
          autoFocus
            type="email"
            name="email"
            id={emailId}
            {...register('email')}
            title="–ü–æ—à—Ç–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ª–∞—Ç–∏–Ω–∏—Ü–µ—é, –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ @ —Ç–∞ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: poshta@gameil.com"
          />
          {errors.email && (
            <ErrorMessageStyle>{errors.email?.message}</ErrorMessageStyle>
          )}
        </InputGroup>
        <InputGroup>
          <InputLabel htmlFor={passwordId}>–ü–∞—Ä–æ–ª—å</InputLabel>
          <Input
          type={passwordVisible ? 'text' : 'password'}
            name="password"
            id={passwordId}
            {...register('password')}
            title="–ü–∞—Ä–æ–ª—å –º–∞—î —Å–∫–ª–∞–¥–∞—Ç–∏—Å—å –≤—ñ–¥ 5 –¥–æ 12 —Å–∏–º–≤–æ–ª—ñ–≤"
          />
          {errors.password && (
            <ErrorMessageStyle>{errors.password?.message}</ErrorMessageStyle>
          )}
          <BtnVisiblePassword type='button' onClick={togglePasswordVisible} data-shown={passwordVisible}>{passwordVisible ? <BsEye /> : <BsEyeSlash/>}</BtnVisiblePassword>
        </InputGroup>
        <Button type="submit">
          –í—Ö—ñ–¥
          <CiLogin />
        </Button>
      </FormStyle>
    </ContainerLogInPage>
  );
}
