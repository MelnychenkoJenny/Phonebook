import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import {
  Button,
  ErrorMessageStyle,
  FormStyle,
  InputGroup,
  InputLabel,
  Input,
} from 'components/ContactForm/ContacrForm.styled';
import { nanoid } from 'nanoid';
import { useForm } from 'react-hook-form';
import { MdAppRegistration } from 'react-icons/md';
import { useDispatch } from 'react-redux';
import { registerAuth } from 'redux/Auth/operationsAuth';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { ContainerRegisterPage } from './RegisterPage.styled';
import { Title } from 'components/App/App.styled';

const schema = yup.object().shape({
  name: yup.string().required("–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ!"),
  email: yup
    .string()
    .email('–ü–æ—à—Ç–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ—é, –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ @ —Ç–∞ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è')
    .required("–ü–æ—à—Ç–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞!"),
  password: yup
    .string()
    .required("–ü–∞—Ä–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π!")
    .min(7, '–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 7 —Ü–∏—Ñ—Ä')
    .max(12, '–ü–∞—Ä–æ–ª—å –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 12 —Ü–∏—Ñ—Ä'),
});

const nameId = nanoid();
const passwordId = nanoid();
const emailId = nanoid();

export default function RegisterPage() {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(schema),
  });

  const dispatch = useDispatch();

  const onSubmit = ({ name, email, password }) => {
    const dataRegister = { name, email, password };
    dispatch(registerAuth(dataRegister))
      .unwrap()
      .then(({ user: { name } }) => {
        reset();
        return toast.success(
          `–í—ñ—Ç–∞—î–º–æ, ${name} —É —Ç–≤–æ—ó–π –æ—Å–æ–±–∏—Å—Ç—ñ–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ñ–π –∫–Ω–∏–∑—ñ.`
        );
      })
      .catch(() =>
        toast.error(
          '–£–ø—Å. –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –≤—Å—ñ –¥–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω–æ –≤—ñ—Ä–Ω–æ –∞–±–æ –í–∏ –≤–∂–µ –∑–∞—Ä–∞—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.üôÑ'
        )
      );
  };

  return (
    <ContainerRegisterPage>
      <FormStyle onSubmit={handleSubmit(onSubmit)}>
        <Title>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</Title>
        <InputGroup>
          <InputLabel htmlFor={nameId}>–Ü–º'—è / –ù—ñ–∫</InputLabel>
          <Input
            {...register('name')}
            autoFocus
            type="text"
            name="name"
            id={nameId}
            title="–Ü–º'—è –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ —Ü–∏—Ñ—Ä–∏, –∞–ø–æ—Å—Ç—Ä–æ—Ñ, —Ç–∏—Ä–µ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ê–¥—Ä—ñ–∞–Ω, –ú–µ—Ä—Å–µ—Ä2, –¥'–ê—Ä—Ç–∞–Ω—å—è–Ω"
          />
          {errors.name && (
            <ErrorMessageStyle>{errors.name?.message}</ErrorMessageStyle>
          )}
        </InputGroup>
        <InputGroup>
          <InputLabel htmlFor={emailId}>–ü–æ—à—Ç–∞</InputLabel>
          <Input
            type="email"
            name="email"
            id={emailId}
            {...register('email')}
            title="–ü–æ—à—Ç–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ª–∞—Ç–∏–Ω–∏—Ü–µ—é, –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ @ —Ç–∞ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: poshta@gameil.com"
          />
          {errors.email && (
            <ErrorMessageStyle>{errors.email?.message}</ErrorMessageStyle>
          )}
        </InputGroup>
        <InputGroup>
          <InputLabel htmlFor={passwordId}>–ü–∞—Ä–æ–ª—å</InputLabel>
          <Input
            type="password"
            name="password"
            id={passwordId}
            {...register('password')}
            title="–ü–∞—Ä–æ–ª—å –º–∞—î —Å–∫–ª–∞–¥–∞—Ç–∏—Å—å –≤—ñ–¥ 7 –¥–æ 12 —Å–∏–º–≤–æ–ª—ñ–≤"
          />
          {errors.password && (
            <ErrorMessageStyle>{errors.password?.message}</ErrorMessageStyle>
          )}
        </InputGroup>
        <Button type="submit">
          –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏
          <MdAppRegistration />
        </Button>
      </FormStyle>
    </ContainerRegisterPage>
  );
}
